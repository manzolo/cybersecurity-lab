#cloud-config
package_update: true
package_upgrade: true
packages:
  - netcat-openbsd
  - nmap
  - curl
  - wget
  - python3
  - python3-pip
  - git
  - htop
  - net-tools
  - nikto
  - dirb
  - gobuster

users:
  - name: labuser
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... # Replace with your SSH key

write_files:
  - path: /opt/attack-scripts/port-scanner.py
    content: |
      #!/usr/bin/env python3
      """Enhanced Port Scanner for testing"""
      import socket
      import sys
      import threading
      from datetime import datetime
      import argparse
      
      def scan_port(target, port, results, timeout=1):
          try:
              sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
              sock.settimeout(timeout)
              result = sock.connect_ex((target, port))
              sock.close()
              
              if result == 0:
                  results.append(port)
                  print(f"Port {port}: OPEN")
          except:
              pass
      
      def main():
          parser = argparse.ArgumentParser(description='Port Scanner')
          parser.add_argument('target', help='Target IP address')
          parser.add_argument('-p', '--ports', help='Port range', default='common')
          parser.add_argument('-t', '--timeout', type=int, help='Timeout', default=1)
          
          args = parser.parse_args()
          
          print(f"Scanning {args.target}...")
          print(f"Start time: {datetime.now()}")
          
          results = []
          threads = []
          
          if args.ports == 'common':
              ports_to_scan = [21, 22, 23, 25, 53, 80, 110, 135, 139, 143, 443, 993, 995, 1723, 3306, 3389, 5900, 8080, 9000]
          elif args.ports == 'all':
              ports_to_scan = range(1, 65536)
          elif '-' in args.ports:
              start, end = map(int, args.ports.split('-'))
              ports_to_scan = range(start, end + 1)
          else:
              ports_to_scan = [int(args.ports)]
          
          print(f"Scanning {len(list(ports_to_scan))} ports...")
          
          for port in ports_to_scan:
              thread = threading.Thread(target=scan_port, args=(args.target, port, results, args.timeout))
              threads.append(thread)
              thread.start()
              
              if len(threads) >= 100:
                  for t in threads:
                      t.join()
                  threads = []
          
          for thread in threads:
              thread.join()
          
          print(f"\nScan complete. Open ports: {sorted(results)}")
          print(f"Total open ports: {len(results)}")
      
      if __name__ == "__main__":
          main()
    permissions: '0755'

  - path: /opt/attack-scripts/connection-tester.py
    content: |
      #!/usr/bin/env python3
      """Connection Tester - FIXED VERSION"""
      import socket
      import time
      import sys
      import logging
      import os
      import requests
      from datetime import datetime
      import argparse
      
      # FIXED: Use proper home directory resolution
      log_dir = os.path.expanduser("~/logs")
      
      try:
          os.makedirs(log_dir, mode=0o755, exist_ok=True)
          log_file = os.path.join(log_dir, "attacker.log")
      except PermissionError:
          log_dir = "/tmp"
          log_file = os.path.join(log_dir, "attacker.log")
      
      try:
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(message)s',
              handlers=[
                  logging.FileHandler(log_file),
                  logging.StreamHandler()
              ]
          )
          logger = logging.getLogger(__name__)
          logger.info(f"Logging initialized. Log file: {log_file}")
      except Exception as e:
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
          logger = logging.getLogger(__name__)
          logger.warning(f"File logging failed: {e}")
      
      def test_tcp_connection(target, port, interval=3, max_tests=5):
          logger.info(f"Testing TCP connection to {target}:{port}")
          success_count = fail_count = 0
          
          for i in range(max_tests):
              try:
                  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                      sock.settimeout(3)
                      sock.connect((target, port))
                      sock.send(b"info\n")
                      response = sock.recv(1024).decode('utf-8')
                      
                      success_count += 1
                      logger.info(f"TCP SUCCESS #{success_count}: Response length: {len(response)} chars")
                      
              except Exception as e:
                  fail_count += 1
                  logger.warning(f"TCP FAIL #{fail_count}: {e}")
              
              if i < max_tests - 1:
                  time.sleep(interval)
          
          logger.info(f"TCP Test finished. Successes: {success_count}, Failures: {fail_count}")
          return success_count, fail_count
      
      def test_http_connection(target, port=8080):
          logger.info(f"Testing HTTP connection to {target}:{port}")
          success_count = fail_count = 0
          endpoints = ['/', '/info', '/echo?msg=test', '/file?name=test.txt']
          
          for endpoint in endpoints:
              try:
                  url = f"http://{target}:{port}{endpoint}"
                  response = requests.get(url, timeout=5)
                  success_count += 1
                  logger.info(f"HTTP SUCCESS: {endpoint} -> Status: {response.status_code}")
              except Exception as e:
                  fail_count += 1
                  logger.warning(f"HTTP FAIL: {endpoint} -> {e}")
          
          logger.info(f"HTTP Test finished. Successes: {success_count}, Failures: {fail_count}")
          return success_count, fail_count
      
      def main():
          parser = argparse.ArgumentParser(description='Connection Tester')
          parser.add_argument('target', help='Target IP address')
          parser.add_argument('-p', '--port', type=int, help='Target port', default=9000)
          parser.add_argument('-t', '--type', choices=['tcp', 'http', 'both'], default='both')
          parser.add_argument('-c', '--count', type=int, help='Number of tests', default=3)
          parser.add_argument('-i', '--interval', type=int, help='Interval', default=3)
          
          args = parser.parse_args()
          
          logger.info(f"Starting connection tests to {args.target}")
          tcp_success = tcp_fail = http_success = http_fail = 0
          
          if args.type in ['tcp', 'both']:
              tcp_success, tcp_fail = test_tcp_connection(args.target, args.port, args.interval, args.count)
          
          if args.type in ['http', 'both']:
              http_success, http_fail = test_http_connection(args.target, 8080)
          
          total_success = tcp_success + http_success
          total_fail = tcp_fail + http_fail
          
          print(f"\n=== SUMMARY ===")
          print(f"Total Successes: {total_success}")
          print(f"Total Failures: {total_fail}")
          if (total_success + total_fail) > 0:
              success_rate = (total_success / (total_success + total_fail)) * 100
              print(f"Success Rate: {success_rate:.1f}%")
      
      if __name__ == "__main__":
          main()
    permissions: '0755'

  - path: /opt/attack-scripts/interactive-client.py
    content: |
      #!/usr/bin/env python3
      """Interactive client to talk to the vulnerable server"""
      import socket
      import sys
      import readline
      import argparse
      
      class InteractiveClient:
          def __init__(self, target, port):
              self.target = target
              self.port = port
              self.sock = None
              
          def connect(self):
              try:
                  self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                  self.sock.connect((self.target, self.port))
                  print(f"Connected to {self.target}:{self.port}")
                  
                  initial = self.sock.recv(1024).decode('utf-8')
                  print(initial, end='')
                  
                  return True
              except Exception as e:
                  print(f"Connection error: {e}")
                  return False
                  
          def interactive_session(self):
              print("Interactive mode - Type 'quit' or Ctrl+C to exit")
              print("Available commands: help, info, time, echo <msg>, status, whoami, uptime, quit")
              
              try:
                  while True:
                      command = input("")
                      if command.lower() in ['quit', 'exit']:
                          self.sock.send(b"quit\n")
                          break
                      
                      self.sock.send(f"{command}\n".encode())
                      response = self.sock.recv(2048).decode('utf-8')
                      print(response, end='')
                      
              except (KeyboardInterrupt, EOFError):
                  print("\nExiting...")
              except Exception as e:
                  print(f"Error: {e}")
              finally:
                  if self.sock:
                      self.sock.close()
      
      def main():
          parser = argparse.ArgumentParser(description='Interactive Client')
          parser.add_argument('target', help='Target IP address')
          parser.add_argument('-p', '--port', type=int, help='Target port', default=9000)
          
          args = parser.parse_args()
          
          client = InteractiveClient(args.target, args.port)
          if client.connect():
              client.interactive_session()
      
      if __name__ == "__main__":
          main()
    permissions: '0755'

  - path: /opt/attack-scripts/web-fuzzer.py
    content: |
      #!/usr/bin/env python3
      """Web fuzzer for vulnerability testing"""
      import requests
      import sys
      import argparse
      
      def test_xss(target, port=8080):
          print("Testing for XSS vulnerabilities...")
          
          payloads = [
              "<script>alert('XSS')</script>",
              "javascript:alert('XSS')",
              "<img src=x onerror=alert('XSS')>",
          ]
          
          for payload in payloads:
              try:
                  url = f"http://{target}:{port}/echo?msg={payload}"
                  response = requests.get(url, timeout=5)
                  
                  if payload in response.text:
                      print(f"[VULNERABLE] XSS found with payload: {payload}")
                  else:
                      print(f"[SAFE] Payload filtered: {payload}")
                      
              except Exception as e:
                  print(f"Error testing XSS: {e}")
      
      def test_directory_traversal(target, port=8080):
          print("Testing for Directory Traversal...")
          
          payloads = [
              "../../../etc/passwd",
              "test.txt"
          ]
          
          for payload in payloads:
              try:
                  url = f"http://{target}:{port}/file?name={payload}"
                  response = requests.get(url, timeout=5)
                  
                  if response.text != "File not found":
                      print(f"[VULNERABLE] Directory traversal with: {payload}")
                      print(f"Response preview: {response.text[:100]}...")
                  else:
                      print(f"[BLOCKED] Payload blocked: {payload}")
                      
              except Exception as e:
                  print(f"Error testing directory traversal: {e}")
      
      def main():
          parser = argparse.ArgumentParser(description='Web Fuzzer')
          parser.add_argument('target', help='Target IP address')
          parser.add_argument('-p', '--port', type=int, help='Target port', default=8080)
          parser.add_argument('-t', '--test', choices=['xss', 'traversal', 'all'], default='all')
          
          args = parser.parse_args()
          
          print(f"Starting web vulnerability tests against {args.target}:{args.port}")
          
          if args.test in ['xss', 'all']:
              test_xss(args.target, args.port)
              print()
              
          if args.test in ['traversal', 'all']:
              test_directory_traversal(args.target, args.port)
      
      if __name__ == "__main__":
          main()
    permissions: '0755'

runcmd:
  # Create directories with proper ownership and permissions
  - [mkdir, -p, /opt/attack-scripts]
  - [mkdir, -p, /home/ubuntu/logs]
  - [chown, -R, ubuntu:ubuntu, /home/ubuntu/logs]
  - [chmod, 755, /home/ubuntu/logs]
  - [chmod, +x, /opt/attack-scripts/*.py]
  - [pip3, install, requests]
  
  # Ensure ubuntu user can write to logs
  - [chown, ubuntu:ubuntu, /home/ubuntu]

final_message: "ATTACKER VM configured with enhanced testing scripts and fixed permissions"
